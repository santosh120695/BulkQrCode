{"version":3,"sources":["components/header/header.js","components/main/code_form.js","components/main/code_container.js","components/main/print_window.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","margin","Header","react_default","a","createElement","AppBar","position","color","Toolbar","Typography","variant","CodeForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onsubmit","text","state","code_text","split","props","generate_code","setState","show_pdf","handleChange","event","target","value","handleClick","open_print_window","_this2","style","marginTop","marginBottom","Grid","container","direction","alignItems","justify","item","xs","TextField","label","fullWidth","multiline","rows","className","onChange","InputLabelProps","shrink","Button","onClick","backgroundColor","textAlign","React","Component","CodeContainer","qr_codes","codes","map","code","lib_default","size","class","Paper","paddingLeft","id","PrintWindow","react_new_window_default","code_container","Main","open_window","console","log","Container","fixed","code_form","print_window","App","header","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16a9aea2.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    margin: '1%',\n  },\n});\n\nfunction Header() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            QrCode Generator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QRCode from 'qrcode.react'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport './container.css'\n\nclass CodeForm extends React.Component {\n  constructor(){\n    super()\n    this.state = {code_text: \"\", show_pdf: false}\n  }\n\n  onsubmit = () => {\n    let text = this.state.code_text.split('\\n')\n    this.props.generate_code(text)\n    this.setState({\n      code_text: \"\",\n      show_pdf: true\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      code_text: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    this.props.open_print_window()\n  }\n  render(){\n    return(\n      <div style={{marginTop: '2%', marginBottom: '2%'}}>\n        <Grid container\n        direction = \"row\"\n        alignItems=\"center\"\n        justify=\"center\"\n        style = {{marginBottom: '2%'}}\n        >\n            <Grid item xs = {12}>\n              <TextField\n                label=\"Enter Value To Generate Codes\"\n                fullWidth\n                multiline\n                rows=\"15\"\n                margin=\"normal\"\n                variant=\"filled\"\n                className = \"code_area\"\n                onChange = {(event) => this.handleChange(event)}\n                value = {this.state.code_text}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n            </Grid>\n         </Grid>\n      <Grid container\n      direction=\"row\"\n      justify=\"space-between\"\n      alignItems=\"flex-end\"\n      >\n       <Grid item xs={3}>\n        <Button\n        variant=\"contained\"\n        color=\"default\"\n        onClick = {this.onsubmit}\n        style = {{backgroundColor: \"#f4f4f4\"}}\n         >\n        Generate\n        </Button>\n        </Grid>\n\n        {this.state.show_pdf ?\n        <Grid item xs={1}>\n         <Button\n         variant=\"contained\"\n         color=\"default\"\n         onClick={this.handleClick}\n         style = {{backgroundColor: \"#f4f4f4\", textAlign: 'right', alignItems: 'left'}}\n         >\n         Print\n         </Button>\n         </Grid>: \"\"\n       }\n      </Grid>\n      </div>\n    )\n  }\n}\n\n\nexport default CodeForm\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport QRCode from 'qrcode.react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport './qr_code.css'\n\n\n\nclass CodeContainer extends React.Component{\n   render(){\n     let qr_codes = this.props.codes.map((code) =>\n             <Grid item xs = {2}>\n             <p>\n              <QRCode value = {code} size={60} />\n             </p>\n              <p class=\"qr_code\">{code}</p><\n             /Grid>\n   )\n     return(\n       <Paper style={{paddingLeft:\"4%\"}} id={'code_container'}>\n       <Grid container\n       direction=\"row\"\n       justify=\"center\"\n       alignItems=\"center\"\n       >\n       {qr_codes}\n       </Grid>\n       </Paper>\n     )\n   }\n}\n\nexport default CodeContainer\n","import React,{ Component } from \"react\";\nimport NewWindow from 'react-new-window';\nimport CodeContainer from './code_container'\n\nconst PrintWindow = (props) => (\n  <NewWindow>\n    <div>\n      <CodeContainer codes = {props.codes} />\n    </div>\n  </NewWindow>\n)\n\nexport default PrintWindow\n","import React,{ Component } from \"react\";\nimport CodeForm from \"./code_form\"\nimport Container from '@material-ui/core/Container';\nimport CodeContainer from './code_container'\nimport PrintWindow from './print_window'\n\n\n\nclass Main extends Component {\n    constructor(props){\n        super(props)\n        this.state = {}\n        this.state = {codes: [], open_window: false}\n    }\n\n    generate_code = (codes) => {\n      this.setState(\n        {\n          codes: codes,\n          open_window: false\n        }\n      )\n    }\n\n    open_print_window = () => {\n     this.setState({open_window: true})\n     console.log(this.state.open_window)\n    }\n\n\n    render(){\n        return(\n            <Container fixed>\n            <div>\n              <CodeForm generate_code = {this.generate_code} open_print_window = {this.open_print_window}/>\n            </div>\n              <CodeContainer codes = {this.state.codes} />\n              {this.state.open_window ? <PrintWindow codes = {this.state.codes} /> : \"\"}\n            </Container>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react';\nimport Header from './components/header/header'\nimport Main from './components/main'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}